version: 2.1

orbs:
  slack: circleci/slack@4.1.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - run:
          name: stop job
          command: exit 1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend tests
          command: |
            cd frontend
            npm install request --save
            npm test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend tests
          command: |
            cd backend
            npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend security scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend security scan
          command: |
            cd backend
            # include next line after generating screenshot 4
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - slack/notify:
          channel: circleci_notification
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip to use persist_to_workspace
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: >
            aws cloudformation deploy
            --template-file .circleci/files/backend.yml
            --tags Project="udapeople"
            --stack-name "jims-back-end-${CIRCLE_WORKFLOW_ID:0:7}"
            --parameter-overrides ID="jimsID-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exists
          command: >
            aws cloudformation deploy
            --template-file .circleci/files/frontend.yml
            --tags Project=frontend
            --stack-name "jims-front-end-${CIRCLE_WORKFLOW_ID:0:7}"
            --parameter-overrides ID="jimsID-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo '[web]' > project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances --filter "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output=text >> project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - run:
        name: on failure delete stacks that were created
        command: >
          aws cloudformation delete-stack --stack-name "jims-back-end-${CIRCLE_WORKFLOW_ID:0:7}"
          aws cloudformation delete-stack --stack-name "jims-front-end-${CIRCLE_WORKFLOW_ID:0:7}"
        when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.8.6-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "00:31:ee:87:23:d8:65:e0:80:39:73:0e:ab:0e:98:d8"
      - attach_workspace:
          at: ~/
      -- run:
          name: install dependencies
          command: apk add --update ansible
      - run:
          name: configure server on AWS
          command: ansible-playbook -i project/.circleci/ansible/inventory.txt project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure