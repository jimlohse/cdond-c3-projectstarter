version: 2.1

orbs:
  slack: circleci/slack@4.1.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id-7:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments 
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-jims-id-${CIRCLE_WORKFLOW_ID:0:7} --recursive --no-paginate
            # aws s3api delete-bucket --bucket udapeople-jims-id-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name jims-back-end-<< parameters.workflow-id-7 >>
            aws cloudformation delete-stack --stack-name jims-front-end-<< parameters.workflow-id-7 >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow
    parameters:
      workflow-id-7:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # export SUCCESS=`curl -H "token: jimgrate-${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migrate-succeeded`
            # if [ $SUCCESS=='failure' ]
            # then
            cd ~/project/backend
            # run migrations three times to get all migrations
            npm run migrations:revert
            npm run migrations:revert
            npm run migrations:revert
            exit 1
            # fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - run:
      #     name: test creating and persisting a file
      #     command: echo "something" > AWS_IP
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/AWS_IP
      #       - project/.circleci/ansible/inventory.txt
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build
      # - run:
      #     name: stop job
      #     command: exit 1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
          key: |
            backend-build
      # - run:
      #     name: stop job
      #     command: exit 1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - attach_workspace:
      #     at: ~/
      # - run:
      #     name: test if AWS_IP file is there
      #     command: |
      #       cd backend
      #       echo "AWS IP file contains..."
      #       cat ../AWS_IP
      #       echo "inventory file contains..."
      #       cat ../.circleci/ansible/inventory.txt
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: run frontend tests
          command: |
            cd frontend
            npm install request --save
            npm test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: run backend tests
          command: |
            cd backend
            npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build
      - run:
          name: run frontend security scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: run backend security scan
          command: |
            cd backend
            # include next line after generating screenshot 4
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - slack/notify:
          channel: circleci_notification
          event: fail
          template: basic_fail_1
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip to use persist_to_workspace
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: >
            aws cloudformation deploy
            --template-file .circleci/files/backend.yml
            --tags Project="uda-back-end"
            --stack-name jims-back-end-${CIRCLE_WORKFLOW_ID:0:7}
            --parameter-overrides ID=jims-id-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: on failure delete stacks that were created
          command: |
            aws cloudformation delete-stack --stack-name jims-back-end-${CIRCLE_WORKFLOW_ID:0:7}
            exit 1
          when: on_fail
      - run:
          name: Ensure front-end infrastructure exists
          command: >
            aws cloudformation deploy
            --template-file .circleci/files/frontend.yml
            --tags Project="uda-front-end"
            --stack-name jims-front-end-${CIRCLE_WORKFLOW_ID:0:7}
            --parameter-overrides ID=jims-id-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: on failure delete stacks that were created
          command: |
            aws cloudformation delete-stack --stack-name jims-front-end-${CIRCLE_WORKFLOW_ID:0:7}
            exit 1
          when: on_fail
      - run:
          name: Add back-end ip to ansible inventory and save to AWS_IP file for later
          command: |
            echo '[web]' > .circleci/ansible/inventory.txt
            export AWS_IP=`aws ec2 describe-instances --filter "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output=text`
            echo AWS_IP is ${AWS_IP}
            echo $AWS_IP >> .circleci/ansible/inventory.txt
            echo $AWS_IP > AWS_IP
      - persist_to_workspace:
          root: ~/
          paths:
            - project/AWS_IP
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.8.6-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:ce:01:06:e8:33:69:d8:1b:8d:5d:31:5f:70:a0:08"
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies
          command: apk add --update ansible
      - run:
          name: configure server on AWS
          command: >
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - run:
          name: configure prometheus on EC2 instance
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/config-prom.yml
      # these can't run, need an image where I have npm and aws cli installed, fix that
      - revert-migrations:
          workflow-id-7: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow-id-7: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: |
            backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations | tee mig-out
            # Send migration results to memstash
            if grep "has been executed successfully" mig-out
            then 
              curl -H "Content-Type: text/plain" -H "token: jimgrate-${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "succeeded" https://api.memstash.io/values/migrate-succeeded
            else
              curl -H "Content-Type: text/plain" -H "token: jimgrate-${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "failed" https://api.memstash.io/values/migrate-succeeded
              exit 1
            fi
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: install aws cli 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      # - run:
      #     name: Install dependencies # and build to get dist (look into caching dist)
      #     command: |
      #       cd frontend
      #       npm i
      #       npm run build
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url and deploy frontend objects 
          command: |
            export BACKEND_IP=`cat AWS_IP`
            export API_URL="http://${BACKEND_IP}"
            echo "BACKEND_IP is ${BACKEND_IP}"
            echo "API_URL is ${API_URL}"
            cd frontend
            npm run build # "bakes" the API_URL into the build, supposedly
            aws s3 cp dist s3://udapeople-jims-id-${CIRCLE_WORKFLOW_ID:0:7} --recursive --acl public-read
      # add some code to rollback on failure 

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - add_ssh_keys:
          fingerprints:
            - "23:ce:01:06:e8:33:69:d8:1b:8d:5d:31:5f:70:a0:08"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies # and build to get dist (look into caching dist)
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: install rsync for ansible synchronize
          command: |
            sudo apt install -y rsync
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install -y ansible
      - run:
          name: setup env file for backend
          command: |
            cd backend/dist
            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
      - run:
          name: Deploy backend
          command: >
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/AWS_IP
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - run:
      #     name: install tar and gzip to use persist_to_workspace
      #     command: yum -y install tar gzip
      - run:
          name: install aws cli if rollback needs to take place
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys:
            - backend-build
      - restore_cache:
          keys:
            - frontend-build
      - attach_workspace:
          at: ~/
      - run:
          name: Frontend smoke test
          command: |
            export URL="http://udapeople-jims-id-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            if curl -s $URL | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Get backend url and backend smoke test
          command: |
            cd ..
            export AWS_IP=`cat project/AWS_IP`
            export BACKEND_URL="http://${AWS_IP}:3030/api/status"
            echo "BACKEND_URL is $BACKEND_URL"
            if curl -s $BACKEND_URL
            then
              exit 0
            else
              exit 1
            fi
          when: on_success
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow-id-7: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow-id-7: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install aws cli if rollback needs to take place
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Update cloudfront distribution, get old workflow ID
          command: |
            export WORKFLOWID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output-text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo WORKFLOWID is $WORKFLOWID
            echo STACKS is $STACKS
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name production-distro --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} --tags Project=udapeople
            if [[ "${STACKS[@]}" =~ "${WORKFLOWID}" ]]
            then
              aws s3 rm s3://udapeople-jims-id-${WORKFLOWID} --recursive --no-paginate
              aws cloudformation delete-stack --stack-name jims-back-end-${WORKFLOWID}
              aws cloudformation delete-stack --stack-name jims-front-end-${WORKFLOWID}
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow-id-7: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow-id-7: ${CIRCLE_WORKFLOW_ID:0:7}

  # IN THE SCREENSHOTS 08 AND 09 OF THE INSTRUCTIONS, THESE TASKS ARE HANDLED IN THE PREVIOUS JOB
  # cleanup:
  #   docker:
  #     # Docker image here
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export OldWorkflowID="the id here"
  #           export STACKS=[] #put the list of stacks here
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # your code here
  #           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - deploy-infrastructure:
          requires:
            # - build-frontend
            # - build-backend
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
          filters:
            branches:
              only: master
      - run-migrations:
          requires:
            - configure-infrastructure
          filters:
            branches:
              only: master
      - deploy-frontend:
          requires:
            - run-migrations
          filters:
            branches:
              only: master
      - deploy-backend:
          requires:
            - run-migrations
          filters:
            branches:
              only: master
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
          filters:
            branches:
              only: master
      - cloudfront-update:
          requires:
            - smoke-test
          filters:
            branches:
              only: master
