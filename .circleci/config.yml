version: 2.1

orbs:
  slack: circleci/slack@4.1.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build
      # - run:
      #     name: stop job
      #     command: exit 1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build
      # - run:
      #     name: stop job
      #     command: exit 1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: run frontend tests
          command: |
            cd frontend
            npm install request --save
            npm test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: run backend tests
          command: |
            cd backend
            npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend security scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend security scan
          command: |
            cd backend
            # include next line after generating screenshot 4
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - slack/notify:
          channel: circleci_notification
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip to use persist_to_workspace
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: >
            aws cloudformation deploy
            --template-file .circleci/files/backend.yml
            --tags Project="uda-back-end"
            --stack-name "jims-back-end-${CIRCLE_WORKFLOW_ID,,:0:7}"
            --parameter-overrides ID="jimsID-${CIRCLE_WORKFLOW_ID,,:0:7}"
      - run:
          name: Ensure front-end infrastructure exists
          command: >
            aws cloudformation deploy
            --template-file .circleci/files/frontend.yml
            --tags Project="uda-front-end"
            --stack-name "jims-front-end-{${CIRCLE_WORKFLOW_ID:0:7},,}"
            --parameter-overrides ID="jimsID-{${CIRCLE_WORKFLOW_ID:0:7},,}"
      - run:
          name: Add back-end ip to ansible inventory and save to AWS_IP file for later
          command: |
            echo '[web]' > project/.circleci/ansible/inventory.txt
            export AWS_IP=`aws ec2 describe-instances --filter "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output=text`
            echo $AWS_IP >> project/.circleci/ansible/inventory.txt
            echo $AWS_IP > project/AWS_IP
      # - run:
          # name: on failure delete stacks that were created
          # command: >
          #   aws cloudformation delete-stack --stack-name "jims-back-end-{${CIRCLE_WORKFLOW_ID:0:7},,}"
          #   aws cloudformation delete-stack --stack-name "jims-front-end-{${CIRCLE_WORKFLOW_ID:0:7},,}"
          #   exit 1
          # when: on_fail
      - persist_to_workspace:
          root: ~/
          paths:
            - project/AWS_IP
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.8.6-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:ce:01:06:e8:33:69:d8:1b:8d:5d:31:5f:70:a0:08"
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies
          command: apk add --update ansible
      - run:
          name: configure server on AWS
          command: >
            ansible-playbook -i project/.circleci/ansible/inventory.txt project/.circleci/ansible/configure-server.yml
            --extra-vars '{"ENVIRONMENT":"production","TYPEORM_CONNECTION":"postgres","TYPEORM_ENTITIES":"./src/modules/domain/**/*.entity.ts"}'
            --extra-vars '{"TYPEORM_HOST":$TYPEORM_HOST,"TYPEORM_PORT":"5432","TYPEORM_USERNAME":$TYPEORM_USERNAME}'
            --extra-vars '{"TYPEORM_PASSWORD":$TYPEORM_PASSWORD,"TYPEORM_DATABASE":$TYPEORM_DATABASE}'
      # - run:
      #     name: on failure delete stacks that were created
      #     command: >
      #       aws cloudformation delete-stack --stack-name "jims-back-end-{${CIRCLE_WORKFLOW_ID:0:7},,}"
      #       aws cloudformation delete-stack --stack-name "jims-front-end-{${CIRCLE_WORKFLOW_ID:0:7},,}"
      #     when: on_fail

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            npm run migrations > mig-out
      - run:
          name: Send migration results to memstash
          command: |
            if grep "has been executed successfully" mig-out
            then curl -H "Content-Type: text/plain" -H "token: jimgrate-{${CIRCLE_WORKFLOW_ID:0:7},,}" --request PUT --data "succeeded" https://api.memstash.io/values/key
            else exit 1
            fi
      - run:
          name: rollback after failed migration
          command: npm run migrations:revert
          when: on_fail

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install aws cli 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install dependencies
          command: |
            npm i
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=`cat project/AWS_IP`
            export API_URL="http://${BACKEND_IP}"
            echo "API_URL is ${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm run build # "bakes" the API_URL into the build, supposedly
            aws s3 cp project/frontend/dist s3://udapeople-jimsID-{${CIRCLE_WORKFLOW_ID:0:7},,} --recursive --acl public-read
      # add some code to rollback on failure

  deploy-backend:
    docker:
      - image: python:3.8.6-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:ce:01:06:e8:33:69:d8:1b:8d:5d:31:5f:70:a0:08"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            npm i
      - run:
          name: get API_URL as env var
          command: |
            export BACKEND_IP=`cat project/AWS_IP`
      - run:
          name: copy backend dist to EC2 instance
          command: |
            ssh ubuntu@${BACKEND_IP} 'mkdir -p project/backend/dist'
            scp -r project/backend/dist ubuntu@${BACKEND_IP}:~/
      - run:
          name: Deploy backend
          command: >
            ansible-playbook -i project/.circleci/ansible/inventory.txt project/.circleci/ansible/deploy-backend.yml
            --extra-vars '{"ENVIRONMENT":"production","TYPEORM_CONNECTION":"postgres","TYPEORM_ENTITIES":"./src/modules/domain/**/*.entity.ts"}'
            --extra-vars '{"TYPEORM_HOST":$TYPEORM_HOST,"TYPEORM_PORT":"5432","TYPEORM_USERNAME":$TYPEORM_USERNAME}'
            --extra-vars '{"TYPEORM_PASSWORD":$TYPEORM_PASSWORD,"TYPEORM_DATABASE":$TYPEORM_DATABASE, "BACKEND_IP":$BACKEND_IP}'
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
